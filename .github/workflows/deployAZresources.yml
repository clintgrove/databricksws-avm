name: Deploy Bicep file
on:
  workflow_dispatch:
    inputs:
      paramRG:
        description: 'Parameter for resource group. Note: the environment will be appended to the end of the resource group name'
        required: false
        default: 'dbr-private-rg-'
      newOrExistingVNET: 
        description: 'Parameter for new or existing VNET'
        required: true
        default: existing
      useVnetInThisResourceGroup:
        description: 'Parameter for using VNET that already exists'
        default: dbr-private-rg-dev  
      useExistingPrivateDnsZone:
        description: 'Parameter for using existing Private DNS Zone'
        default: '/subscriptions/6d0a0c1f-6739-473b-962f-01f793ed5368/resourceGroups/dbr-private-rg-dev/providers/Microsoft.Network/privateDnsZones/privatelink.azuredatabricks.net'  
      environment:
        description: 'Select environment'
        required: true
        type: choice
        options:
          - dev
          - prod

env:
  CI_KEY_VAULT_NAME: "${{ vars.CI_KEY_VAULT_NAME }}"

jobs:
  deploy-databricks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure subscription context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: CreateRG
        run: az group create --name  ${{ github.event.inputs.paramRG }}${{ github.event.inputs.environment}} --location 'uksouth'

      - name: Databricks Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.paramRG }}${{ github.event.inputs.environment}} 
          template: ./main.bicep
          parameters: 'vnetNewOrExisting=${{ github.event.inputs.newOrExistingVNET }} workspaceName=dbr${{ github.event.inputs.environment}}1 existingVnetResourceGroupName=${{ github.event.inputs.useVnetInThisResourceGroup }} existingPrivateDnsZoneId=${{ github.event.inputs.useExistingPrivateDnsZone }}'
          failOnStdErr: false

  deploy-vm:
    runs-on: ubuntu-latest
    needs: deploy-databricks

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure subscription context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Get secret from Key Vault
        id: get-secret
        run: |
          VM_PASSWORD=$(az keyvault secret show --name kv-vmpassword --vault-name ${{ env.CI_KEY_VAULT_NAME }} --query value -o tsv)
          echo "::add-mask::$VM_PASSWORD"
          echo "vm_password=$VM_PASSWORD" >> $GITHUB_OUTPUT

      - name: VM Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.paramRG }}dev
          template: ./vm.bicep
          parameters: 'vmpassword=${{ steps.get-secret.outputs.vm_password }}'
          failOnStdErr: false

  deploy-storage:
    runs-on: ubuntu-latest
    needs:  
    - deploy-databricks
    - deploy-vm

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure subscription context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Storage Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.paramRG }}${{ github.event.inputs.environment}}
          template: ./storage.bicep
          failOnStdErr: false
