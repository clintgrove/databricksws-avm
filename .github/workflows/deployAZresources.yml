name: Deploy to DEV
on:
  workflow_dispatch:
    inputs:
      paramRG:
        description: 'Parameter for resource group'
        required: false
        default: 'dbricks-dev'
      dbricksWorkspaceName:
        description: 'Parameter for Databricks workspace name'
        required: true
      newOrExistingVNET: 
        description: 'Parameter for new or existing VNET'
        required: true
        default: existing

env:
  CI_KEY_VAULT_NAME: "${{ vars.CI_KEY_VAULT_NAME }}"

jobs:
  deploy-network:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure subscription context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: CreateRG
        run: az group create --name 'dbricks-networking' --location 'uksouth'

      - name: Databricks Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: 'dbricks-networking'
          template: ./networking.bicep
          parameters: 'vnetNewOrExisting=${{ github.event.inputs.newOrExistingVNET }}'
          failOnStdErr: false

  deploy-databricks:
    runs-on: ubuntu-latest
    needs: deploy-network

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure subscription context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: CreateRG
        run: az group create --name  ${{ github.event.inputs.paramRG }} --location 'uksouth'
      
      - name: Capture Networking Outputs
        run: |
          VNET_ID=$(az deployment group show --resource-group dbricks-networking --name networking --query properties.outputs.vnetId.value -o tsv)
          echo "vnet_id=$VNET_ID" >> $GITHUB_ENV
      
      - name: Capture Networking Outputs
        run: |
            echo "Fetching network deployment outputs"
            VNET_ID=$(az deployment group show --resource-group dbricks-networking --name networking --query properties.outputs.vnetId.value -o tsv)
            SUBNET_NAME_0=$(az deployment group show --resource-group dbricks-networking --name networking --query properties.outputs.vnetsubName0.value -o tsv)
            SUBNET_NAME_1=$(az deployment group show --resource-group dbricks-networking --name networking --query properties.outputs.vnetsubName1.value -o tsv)
            SUBNET_IDS=$(az deployment group show --resource-group dbricks-networking --name networking --query properties.outputs.subnetResourceIds.value -o tsv)
            echo "vnet_id=$VNET_ID" >> $GITHUB_ENV
            echo "subnet_name_0=$SUBNET_NAME_0" >> $GITHUB_ENV
            echo "subnet_name_1=$SUBNET_NAME_1" >> $GITHUB_ENV
            echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_ENV
            echo "Captured VNet and Subnet details"
        

      - name: Databricks Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.paramRG }}
          template: ./main.bicep
          parameters: |
           workspaceName=${{ github.event.inputs.dbricksWorkspaceName }}
           vnetId=${{ env.vnet_id }}
           subnetName0=${{ env.subnet_name_0 }}
           subnetName1=${{ env.subnet_name_1 }}
           subnetIds=${{ env.subnet_ids }}
          failOnStdErr: false

  deploy-vm:
    runs-on: ubuntu-latest
    needs: deploy-databricks

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure subscription context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: CreateRGforVM
        run: az group create --name 'dbricks-vm' --location 'uksouth'

      - name: Get secret from Key Vault
        id: get-secret
        run: |
          VM_PASSWORD=$(az keyvault secret show --name kv-vmpassword --vault-name ${{ env.CI_KEY_VAULT_NAME }} --query value -o tsv)
          echo "::add-mask::$VM_PASSWORD"
          echo "vm_password=$VM_PASSWORD" >> $GITHUB_OUTPUT

      - name: VM Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: 'dbricks-vm'
          template: ./vm.bicep
          parameters: 'vmpassword=${{ steps.get-secret.outputs.vm_password }}'
          failOnStdErr: false

  deploy-storage:
    runs-on: ubuntu-latest
    needs:  
    - deploy-databricks
    - deploy-vm

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure subscription context
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION }}

      - name: Storage Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.paramRG }}
          template: ./storage.bicep
          failOnStdErr: false
